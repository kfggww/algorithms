* Algorithms

实现常用的数据结构和算法

** 红黑树

这里考虑的是算法第四版的左倾红黑树, 关键的算法在于节点的插入和删除.

*** 节点插入算法

1. 确定要插入节点的位置. 插入的节点必然成为树的叶子节点(不考虑待插入节
   点和原树中节点相同的情况, 如果是这种情况, 可以直接修改节点的value值)
		
2. 用传入的key和value构造一个新的红节点, 插入到确定好的位置.
  
3. 在递归函数逐层返回的过程中, 通过旋转和颜色变换修复被破坏的左倾红黑
   树条件.
	 
4. 递归调用结束之后, 修改树的根节点为黑色.


*** 节点删除算法

**** DeleteMin

1. 如果root是叶子节点, 直接删除.
		
2. 如果root以及left, right都是2-node, 对root进行颜色反转之后,对left调
   用DeleteMin.
		
3. 如果root是3-node, 且left, right都是2-node, 操作同2.

4. 如果root是3-node, left是2-node, right是3-node, 首先对right进行右旋,
   再对root进行左旋, 再调整颜色, 最后对left调用DeleteMin.
		
5. 做和插入算法相同的局部变换, 保持左倾红黑树的平衡.

**** DeleteMax

**** Delete
